diff -Naur linux/drivers/media/pci/saa716x/saa716x_budget.c linux.patch/drivers/media/pci/saa716x/saa716x_budget.c
--- linux/drivers/media/pci/saa716x/saa716x_budget.c	2017-08-08 04:46:26.000000000 +0300
+++ linux.patch/drivers/media/pci/saa716x/saa716x_budget.c	2017-08-15 12:10:04.794427037 +0300
@@ -2693,6 +2693,155 @@
 	}
 };
 
+#define SAA716x_MODEL_TBS6618 "TurboSight TBS 6618"
+#define SAA716x_DEV_TBS6618   "DVB-C CI"
+
+static int saa716x_tbs6618_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+    // struct saa716x_dev *dev = adapter->saa716x;
+    // u8 mac[6];
+    
+    // dev_dbg(&dev->pdev->dev, "%s frontend %d attaching\n",
+	// dev->config->model_name, count);
+        
+    // if (count == 0) {	
+        // saa716x_gpio_set_output(dev, 16);
+        // msleep(1);
+        // saa716x_gpio_write(dev, 16, 0);
+        // msleep(50);
+        // saa716x_gpio_write(dev, 16, 1);
+        // msleep(100);
+    // }
+
+    // if (count == 0 ) {
+	// dprintk(SAA716x_ERROR, 1, "Probing for TBS6618 Frontend %d", count);
+	// adapter->fe = tbs6618fe_attach (&tbs6618_fe_config, &i2c0->i2c_adapter);
+	// if (adapter->fe) {
+	    // dprintk(SAA716x_ERROR, 1, "TBS6618 Frontend found @0x%02x",
+		    // tbs6618_fe_config.tbs6618fe_address);
+	    // /* dvb_attach(tbsfe_attach, adapter->fe); */
+	    // tbs_read_mac(&i2c1->i2c_adapter, 160 + 16*count, mac);
+	    // memcpy(adapter->dvb_adapter.proposed_mac, mac, 6);
+	    // printk(KERN_INFO "TurboSight TBS6618 DVB-C card MAC=%pM\n",
+		// adapter->dvb_adapter.proposed_mac);
+	    // saa716x_gpio_set_input(saa716x, 14);
+	    // msleep(1);
+	    // saa716x_gpio_set_input(saa716x, 6);
+	    // msleep(1);
+
+	    // ret = tbsci_i2c_probe(adapter, 3);
+	    // if (!ret) 
+		// tbsci_init(adapter, 0, 5);
+
+	// } else {
+	    // goto exit;
+	// }
+	
+	// dprintk(SAA716x_ERROR, 1, "Done!");
+    // }
+
+    return 0;
+// exit:
+    // printk(KERN_ERR "%s: frontend initialization failed\n", 
+		    // adapter->saa716x->config->model_name);
+    // dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+    // return -ENODEV;
+}
+
+static struct saa716x_config saa716x_tbs6618_config = {
+    .model_name		= SAA716x_MODEL_TBS6618,
+    .dev_type		= SAA716x_DEV_TBS6618,
+    .boot_mode		= SAA716x_EXT_BOOT,
+    .adapters		= 1,
+    .frontend_attach	= saa716x_tbs6618_frontend_attach,
+    .irq_handler		= saa716x_budget_pci_irq,
+    .i2c_rate       = SAA716x_I2C_RATE_400,
+    .i2c_mode		= SAA716x_I2C_MODE_POLLING,
+    .adap_config		= {
+	{
+	    /* adapter 0 */
+	    .ts_port = 3
+	    //.worker  = demux_worker
+	},
+    }
+};
+
+#define SAA716x_MODEL_TBS6680 "TurboSight TBS 6680"
+#define SAA716x_DEV_TBS6680   "DVB-C CI"
+
+static int saa716x_tbs6680_frontend_attach(struct saa716x_adapter *adapter, int count)
+{
+// /* 	struct saa716x_dev *dev = adapter->saa716x;
+    // struct saa716x_i2c *i2c0 = &saa716x->i2c[0];
+    // struct saa716x_i2c *i2c1 = &saa716x->i2c[1];
+    // u8 mac[6];
+    // /* unsigned int data = 0; */
+    // int ret;
+
+    // if (count == 0 || count == 1) {
+	// saa716x_gpio_set_output(saa716x, count ? 20 : 14);
+	// msleep(1);
+	// saa716x_gpio_write(saa716x, count ? 20 : 14, 0);
+	// msleep(50);
+	// saa716x_gpio_write(saa716x, count ? 20 : 14, 1);
+	// msleep(100);
+	
+	// dprintk(SAA716x_ERROR, 1, "Probing for TBS6680 Frontend %d", count);
+	// adapter->fe = tbs6680fe_attach (&tbs6680_fe_config, 
+		// count ? &i2c1->i2c_adapter : &i2c0->i2c_adapter);
+	// if (adapter->fe) {
+	    // dprintk(SAA716x_ERROR, 1, "TBS6680 Frontend found @0x%02x",
+		    // tbs6680_fe_config.tbs6680fe_address);
+	    // /* dvb_attach(tbsfe_attach, adapter->fe); */
+	    // tbs_read_mac(&i2c1->i2c_adapter, 160 + 16*count, mac);
+	    // memcpy(adapter->dvb_adapter.proposed_mac, mac, 6);
+	    // printk(KERN_INFO "TurboSight TBS6680 DVB-C card port%d MAC=%pM\n",
+	    // count, adapter->dvb_adapter.proposed_mac);
+	    // saa716x_gpio_set_input(saa716x, count ? 16 : 6);
+	    // msleep(1);
+	    // saa716x_gpio_set_input(saa716x, count ? 17 : 5);
+	    // msleep(1);
+
+	    // ret = tbsci_i2c_probe(adapter, count ? 3 : 4);
+	    // if (!ret) 
+		// tbsci_init(adapter, count, 6);
+	// } else {
+	    // goto exit;
+	// }
+
+	// dprintk(SAA716x_ERROR, 1, "Done!");
+    // }
+
+    return 0;
+// exit:
+    // printk(KERN_ERR "%s: frontend initialization failed\n",
+		    // adapter->saa716x->config->model_name);
+    // dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+    // return -ENODEV; */
+}
+
+static struct saa716x_config saa716x_tbs6680_config = {
+    .model_name		= SAA716x_MODEL_TBS6680,
+    .dev_type		= SAA716x_DEV_TBS6680,
+    .boot_mode		= SAA716x_EXT_BOOT,
+    .adapters		= 2,
+    .frontend_attach	= saa716x_tbs6680_frontend_attach,
+    .irq_handler		= saa716x_budget_pci_irq,
+    .i2c_rate       = SAA716x_I2C_RATE_400,
+    .i2c_mode		= SAA716x_I2C_MODE_POLLING,
+    .adap_config		= {
+	{
+	    /* adapter 0 */
+	    .ts_port = 1
+	    //.worker  = demux_worker
+	},
+	{
+	    /* adapter 1 */
+	    .ts_port = 3
+	    //.worker  = demux_worker
+	},
+    }
+};
 
 static struct pci_device_id saa716x_budget_pci_table[] = {
 	MAKE_ENTRY(TWINHAN_TECHNOLOGIES, TWINHAN_VP_1028, SAA7160, &saa716x_vp1028_config), /* VP-1028 */
@@ -2719,6 +2868,8 @@
 	MAKE_ENTRY(TECHNOTREND,        TT4100,    SAA7160, &saa716x_tbs6922_config),
 	MAKE_ENTRY(TURBOSIGHT_TBS6983, TBS6983, SAA7160, &saa716x_tbs6983_config),
 	MAKE_ENTRY(TURBOSIGHT_TBS6983, TBS6983+1, SAA7160, &saa716x_tbs6983_config),
+	MAKE_ENTRY(TURBOSIGHT_TBS6618, TBS6618, SAA7160, &saa716x_tbs6618_config),
+	MAKE_ENTRY(TURBOSIGHT_TBS6680, TBS6680, SAA7160, &saa716x_tbs6680_config),
 	{ }
 };
 MODULE_DEVICE_TABLE(pci, saa716x_budget_pci_table);
diff -Naur linux/drivers/media/pci/saa716x/saa716x_budget.h linux.patch/drivers/media/pci/saa716x/saa716x_budget.h
--- linux/drivers/media/pci/saa716x/saa716x_budget.h	2017-08-08 04:46:26.000000000 +0300
+++ linux.patch/drivers/media/pci/saa716x/saa716x_budget.h	2017-08-15 12:01:39.358712598 +0300
@@ -55,6 +55,12 @@
 #define TURBOSIGHT_TBS6983	0x6983
 #define TBS6983 		0x0001
 
+#define TURBOSIGHT_TBS6618	0x6618
+#define TBS6618 		0x0001
+
+#define TURBOSIGHT_TBS6680 	0x6680
+#define TBS6680 		0x0001
+
 #define TECHNOTREND		0x13c2
 #define TT4100			0x3010
 
